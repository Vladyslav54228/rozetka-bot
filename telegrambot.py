import json
import os
import sqlite3
import logging
from datetime import datetime, time
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–µ–±–∞–≥—É
logging.basicConfig(filename="bot.log", format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –®–ø–∞—Ä–≥–∞–ª–∫–∏ (—É—Å—ñ –≤–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏)
NOTES = {
    "–ü—Ä–∏–π–æ–º —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É": """
üì¶ <b>–ü—Ä–∏–π–æ–º —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑—ñ —Å–∫–ª–∞–¥—É (–±—Ä–∞–∫):</b>
1. ERP PL
2. –û–±—Ä–æ–±–∫–∞ ‚Üí –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
3. –ó–≤—ñ–¥–∫–∏: [–í–∫–∞–∂—ñ—Ç—å —Å–∫–ª–∞–¥]
4. –î–æ—Ä–æ–≥–∞: –°–µ—Ä–≤—ñ—Å –õ—å–≤—ñ–≤ –®—É–≤–∞—Ä
5. –°–∫–∞–Ω—É—î–º–æ —Ç–æ–≤–∞—Ä ‚Üí F7
""",
    "–ó–∞–º—ñ–Ω–∞ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤": """
üè∑Ô∏è <b>–ó–∞–º—ñ–Ω–∞ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤ (—â–æ–¥–µ–Ω–Ω–∞):</b>
1. ERP UA ‚Üí –õ—å–≤—ñ–≤ –®—É–≤–∞—Ä
2. –û–±—Ä–æ–±–∫–∏ ‚Üí –î—Ä—É–∫ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤
3. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –Ω–æ–≤–∏–º–∏ —Ü—ñ–Ω–∞–º–∏
4. –ù–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏
""",
    "–î—Ä—É–∫ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤": """
üñ®Ô∏è <b>–î—Ä—É–∫ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤:</b>
1. ERP UA ‚Üí –õ—å–≤—ñ–≤ –®—É–≤–∞—Ä
2. –û–±—Ä–æ–±–∫–∏ ‚Üí –î—Ä—É–∫ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤
3. –í–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ ‚Üí F9
4. –ü—Ä–∏–Ω—Ç–µ—Ä: –ó–µ–±—Ä–∞ –®—É–≤–∞—Ä
""",
    "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É": """
üîç <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É:</b>
1. ERP PL ‚Üí –°–∫–ª–∞–¥
2. –û–±—Ä–æ–±–∫–∞ ‚Üí –ó–∞–ª–∏—à–∫–∏
3. –í–≤–æ–¥–∏–º–æ –∞—Ä—Ç–∏–∫—É–ª ‚Üí F5
4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å
""",
    "–¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ": """
üìÖ <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Ä–º—ñ–Ω—É –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ:</b>
1. ERP UA ‚Üí –õ—å–≤—ñ–≤ –®—É–≤–∞—Ä
2. –ó–∞–ª–∏—à–∫–∏ ‚Üí –§—ñ–ª—å—Ç—Ä ‚Üí –¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ
3. –í–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏, —Ç–µ—Ä–º—ñ–Ω —è–∫–∏—Ö —Å–ø–ª–∏–≤–∞—î
4. –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç ‚Üí F9
""",
    "–ü—Ä–∏–π–æ–º —Ç–æ–≤–∞—Ä—É (–∑–≤–∏—á–∞–π–Ω–∏–π)": """
üì• <b>–ü—Ä–∏–π–æ–º —Ç–æ–≤–∞—Ä—É (–∑–≤–∏—á–∞–π–Ω–∏–π):</b>
1. ERP PL ‚Üí –ü—Ä–∏–π–º–∞–Ω–Ω—è
2. –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí –í–∫–∞–∑–∞—Ç–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞
3. –°–∫–∞–Ω—É—î–º–æ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –¢–ó–î
4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å ‚Üí F7
5. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –ø—Ä–∏–π–æ–º
""",
    "–ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø—Ä–∏–π–æ–º—ñ": """
‚ùå <b>–ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø—Ä–∏–π–æ–º—ñ —Ç–æ–≤–∞—Ä—É:</b>
1. –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –Ω–µ —Å–∫–∞–Ω—É—î—Ç—å—Å—è:
   - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª —É ERP PL
   - –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–æ–º —á–µ—Ä–µ–∑ Rocket Chat
2. –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î:
   - –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫—Ç —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç–µ–π ‚Üí ERP UA ‚Üí –û–±—Ä–æ–±–∫–∏
   - –í–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç—ñ ‚Üí F9
""",
    "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–¥–ª–∏—à–∫—ñ–≤": """
üîé <b>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–¥–ª–∏—à–∫—ñ–≤:</b>
1. ERP PL ‚Üí –ó–∞–ª–∏—à–∫–∏
2. –û–±—Ä–æ–±–∫–∞ ‚Üí –ù–∞–¥–ª–∏—à–∫–∏
3. –°–∫–∞–Ω—É—î–º–æ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –¢–ó–î
4. –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –¥–∞–Ω–∏–º–∏ ERP
5. –Ø–∫—â–æ —î –Ω–∞–¥–ª–∏—à–∫–∏ ‚Üí –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç
""",
    "–¢–æ–≤–∞—Ä –ø—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É": """
üîß <b>–¢–æ–≤–∞—Ä –ø—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É:</b>
1. ERP PL ‚Üí –°–µ—Ä–≤—ñ—Å
2. –û–±—Ä–æ–±–∫–∞ ‚Üí –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É
3. –°–∫–∞–Ω—É—î–º–æ —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä
4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω ‚Üí F7
5. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å–∫–ª–∞–¥
""",
    "–î—Ä—É–∫ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É": """
üñ®Ô∏è <b>–î—Ä—É–∫ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É:</b>
1. ERP UA ‚Üí –õ—å–≤—ñ–≤ –®—É–≤–∞—Ä
2. –û–±—Ä–æ–±–∫–∏ ‚Üí –î—Ä—É–∫ —Å–µ—Ä—ñ–π–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
3. –í–∫–∞–∑–∞—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª ‚Üí F9
4. –ü—Ä–∏–Ω—Ç–µ—Ä: –ó–µ–±—Ä–∞ –®—É–≤–∞—Ä
""",
    "–°–µ—Ä–≤—ñ—Å–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è": """
üìû <b>–°–µ—Ä–≤—ñ—Å–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è:</b>
1. ERP PL ‚Üí –°–µ—Ä–≤—ñ—Å
2. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
3. –í–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É, –∞—Ä—Ç–∏–∫—É–ª, —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä
4. –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ Rocket Chat (–∫–∞–Ω–∞–ª #service)
5. –ß–µ–∫–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
""",
    "–í—ñ–¥–≥—Ä—É–∑–∫–∞ –Ω–∞–¥–ª–∏—à–∫—ñ–≤": """
üöö <b>–í—ñ–¥–≥—Ä—É–∑–∫–∞/–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥–ª–∏—à–∫—ñ–≤:</b>
<b>–®–≤–∏–¥–∫–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è:</b>
1. –¢–ó–î ‚Üí –û–±—Ä–æ–±–∫–∏ ‚Üí –®–≤–∏–¥–∫–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
2. –ö—É–¥–∏: –°–∫–ª–∞–¥ (–ü–æ–¥–æ–ª, –ë—Ä–æ–≤–∞—Ä–∏, –ë–æ—Ä, –ü–æ–¥–æ–ª –õ–í–Ü)
3. –ü–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫: –î–æ—Å—Ç–∞–≤–∫–∞ ‚Üí –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å
4. –°–∫–∞–Ω—É—î–º–æ —Ç–æ–≤–∞—Ä ‚Üí –ó–∞–≤–µ—Ä—à–∏—Ç–∏
5. –ü—Ä–∏–Ω—Ç–µ—Ä: –ó–µ–±—Ä–∞ –®—É–≤–∞—Ä

<b>–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥–ª–∏—à–∫—ñ–≤:</b>
1. –ü–ö ‚Üí –û–±—Ä–æ–±–∫–∞ ‚Üí –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥–ª–∏—à–∫—ñ–≤
2. –í–∏–±–∏—Ä–∞—î–º–æ —Å–∫–ª–∞–¥ ‚Üí –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ ‚Üí –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ
3. –¢–ó–î ‚Üí –ó–±–æ—Ä–∫–∞ ‚Üí –°–∫–∞–Ω—É—î–º–æ —Ç–æ–≤–∞—Ä ‚Üí –ó–æ–Ω–∞ –≤—ñ–¥–≥—Ä—É–∑–∫–∏
4. –í—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ‚Üí –ü–∞–∫—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ ‚Üí –°–∫–∞–Ω—É—î–º–æ —Ç–æ–≤–∞—Ä
5. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ (F9) ‚Üí –ó–∞–≤–µ—Ä—à–∏—Ç–∏ ‚Üí –£–ø–∞–∫—É–≤–∞—Ç–∏ —ñ —Å–ø–∏—Å–∞—Ç–∏
6. –ü—Ä–∏–Ω—Ç–µ—Ä: –ó–µ–±—Ä–∞ –®—É–≤–∞—Ä
""",
    "–î—Ä—É–∫ –º–∞—Ä–∫—É–≤–∞–Ω–Ω—è": """
üè∑Ô∏è <b>–î—Ä—É–∫ –º–∞—Ä–∫—É–≤–∞–Ω–Ω—è:</b>
1. ERP UA ‚Üí –õ—å–≤—ñ–≤ –®—É–≤–∞—Ä
2. –û–±—Ä–æ–±–∫–∏ ‚Üí –î—Ä—É–∫ –º–∞—Ä–∫—É–≤–∞–Ω–Ω—è
3. –í–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä ‚Üí –í–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
4. –ù–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ ‚Üí –ü—Ä–∏–Ω—Ç–µ—Ä: –ó–µ–±—Ä–∞ –®—É–≤–∞—Ä
""",
    "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≤—ñ–¥–≥—Ä—É–∑–∫–∞": """
üì¶ <b>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≤—ñ–¥–≥—Ä—É–∑–∫–∞:</b>
1. ERP UA ‚Üí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
2. –û–±—Ä–æ–±–∫–∞ ‚Üí –í—ñ–¥–≥—Ä—É–∑–∫–∞
3. –°–∫–∞–Ω—É—î–º–æ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –¢–ó–î
4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Üí F9
5. –£–ø–∞–∫–æ–≤–∫–∞ ‚Üí –î–æ—Å—Ç–∞–≤–∫–∞
"""
}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SQLite
def init_db():
    try:
        conn = sqlite3.connect("bot_data.db")
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS reminders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                time TEXT,
                text TEXT,
                chat_id INTEGER,
                repeat TEXT
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS workdays (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                days TEXT
            )
        """)
        cursor.execute("INSERT OR IGNORE INTO workdays (id, days) VALUES (1, ?)", (json.dumps([0, 1, 2, 3, 4]),))
        conn.commit()
    except Exception as e:
        logger.error(f"Failed to initialize database: {e}")
    finally:
        conn.close()

# –ß–∏—Ç–∞–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
def load_reminders():
    try:
        conn = sqlite3.connect("bot_data.db")
        cursor = conn.cursor()
        cursor.execute("SELECT time, text, chat_id, repeat FROM reminders")
        reminders = [{"time": row[0], "text": row[1], "chat_id": row[2], "repeat": row[3]} for row in cursor.fetchall()]
        return reminders
    except Exception as e:
        logger.error(f"Failed to load reminders: {e}")
        return []
    finally:
        conn.close()

def save_reminders(reminders):
    try:
        conn = sqlite3.connect("bot_data.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM reminders")
        for reminder in reminders:
            cursor.execute("INSERT INTO reminders (time, text, chat_id, repeat) VALUES (?, ?, ?, ?)",
                           (reminder["time"], reminder["text"], reminder["chat_id"], reminder.get("repeat")))
        conn.commit()
    except Exception as e:
        logger.error(f"Failed to save reminders: {e}")
    finally:
        conn.close()

# –ß–∏—Ç–∞–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤
def load_workdays():
    try:
        conn = sqlite3.connect("bot_data.db")
        cursor = conn.cursor()
        cursor.execute("SELECT days FROM workdays WHERE id = 1")
        result = cursor.fetchone()
        return json.loads(result[0]) if result else [0, 1, 2, 3, 4]
    except Exception as e:
        logger.error(f"Failed to load workdays: {e}")
        return [0, 1, 2, 3, 4]
    finally:
        conn.close()

def save_workdays(workdays):
    try:
        conn = sqlite3.connect("bot_data.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE workdays SET days = ? WHERE id = 1", (json.dumps(workdays),))
        conn.commit()
    except Exception as e:
        logger.error(f"Failed to save workdays: {e}")
    finally:
        conn.close()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
def is_workday():
    today = datetime.now().weekday()
    workdays = load_workdays()
    return today in workdays

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
keyboard = [
    ["–ü—Ä–∏–π–æ–º —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É", "–ó–∞–º—ñ–Ω–∞ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤", "–î—Ä—É–∫ —Ü—ñ–Ω–Ω–∏–∫—ñ–≤"],
    ["–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É", "–¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ", "–ü—Ä–∏–π–æ–º —Ç–æ–≤–∞—Ä—É (–∑–≤–∏—á–∞–π–Ω–∏–π)"],
    ["–ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø—Ä–∏–π–æ–º—ñ", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–¥–ª–∏—à–∫—ñ–≤", "–¢–æ–≤–∞—Ä –ø—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É"],
    ["–î—Ä—É–∫ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É", "–°–µ—Ä–≤—ñ—Å–Ω—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", "–í—ñ–¥–≥—Ä—É–∑–∫–∞ –Ω–∞–¥–ª–∏—à–∫—ñ–≤"],
    ["–î—Ä—É–∫ –º–∞—Ä–∫—É–≤–∞–Ω–Ω—è", "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≤—ñ–¥–≥—Ä—É–∑–∫–∞"],
    ["–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", "–†–æ–±–æ—á—ñ –¥–Ω—ñ"]
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    init_db()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –≤ –†–æ–∑–µ—Ç—Ü—ñ. –û–±–µ—Ä–∏ —Ç–µ–º—É —à–ø–∞—Ä–≥–∞–ª–∫–∏ –∞–±–æ –∫–µ—Ä—É–π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    logger.info(f"User {update.message.chat_id} started the bot")

async def reply_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"User {update.message.chat_id} requested note: {text}")
    if text == "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è":
        keyboard = [
            [InlineKeyboardButton("08:00", callback_data="reminder_time_08:00"),
             InlineKeyboardButton("12:00", callback_data="reminder_time_12:00")],
            [InlineKeyboardButton("14:00", callback_data="reminder_time_14:00"),
             InlineKeyboardButton("18:00", callback_data="reminder_time_18:00")]
        ]
        await update.message.reply_text(
            "üìÖ –ö–µ—Ä—É–π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏:\n"
            "/addreminder <—á–∞—Å> <–ø–µ—Ä—ñ–æ–¥> <—Ç–µ–∫—Å—Ç> - –î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (HH:MM, –ø–µ—Ä—ñ–æ–¥: daily/weekly)\n"
            "/delreminder <—ñ–Ω–¥–µ–∫—Å> - –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
            "/listreminders - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
            "–ê–±–æ –≤–∏–±–µ—Ä–∏ —á–∞—Å –Ω–∏–∂—á–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif text == "–†–æ–±–æ—á—ñ –¥–Ω—ñ":
        await update.message.reply_text(
            "üìÜ –í–∫–∞–∂–∏ —Ä–æ–±–æ—á—ñ –¥–Ω—ñ –∫–æ–º–∞–Ω–¥–æ—é:\n"
            "/setworkdays <–¥–Ω—ñ> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 0 1 2 3 4 –¥–ª—è –ü–Ω-–ü—Ç)"
        )
    else:
        note = NOTES.get(text)
        if note:
            if len(note) > 4096:
                for i in range(0, len(note), 4096):
                    await update.message.reply_text(note[i:i+4096], parse_mode="HTML")
            else:
                await update.message.reply_text(note, parse_mode="HTML")
        else:
            matches = [key for key in NOTES if text.lower() in key.lower()]
            if matches:
                response = "üìã –ó–Ω–∞–π–¥–µ–Ω—ñ —à–ø–∞—Ä–≥–∞–ª–∫–∏:\n" + "\n".join(matches)
                await update.message.reply_text(response)
            else:
                await update.message.reply_text("ü§î –ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ—ó —à–ø–∞—Ä–≥–∞–ª–∫–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –Ø –±–æ—Ç –¥–ª—è —à–ø–∞—Ä–≥–∞–ª–æ–∫ –ø–æ —Ä–æ–±–æ—Ç—ñ –≤ –†–æ–∑–µ—Ç—Ü—ñ. –í–∏–±–µ—Ä–∏ —Ç–µ–º—É –∑ –º–µ–Ω—é, –∫–µ—Ä—É–π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏ –∞–±–æ –Ω–∞–ø–∏—à–∏ /start."
    )
    logger.info(f"User {update.message.chat_id} used /help")

async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("üìù –í–∫–∞–∂–∏ —á–∞—Å, –ø–µ—Ä—ñ–æ–¥ (daily/weekly) —ñ —Ç–µ–∫—Å—Ç: /addreminder HH:MM daily –¢–µ–∫—Å—Ç")
        return
    try:
        reminder_time = time.fromisoformat(args[0])
        repeat = args[1].lower()
        if repeat not in ["daily", "weekly"]:
            await update.message.reply_text("‚ùå –ü–µ—Ä—ñ–æ–¥: daily –∞–±–æ weekly")
            return
        text = " ".join(args[2:])
        reminders = load_reminders()
        reminders.append({
            "time": args[0],
            "repeat": repeat,
            "text": text,
            "chat_id": update.message.chat_id
        })
        save_reminders(reminders)
        await update.message.reply_text(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ: {args[0]} ({repeat}) - {text}")
        logger.info(f"User {update.message.chat_id} added reminder: {args[0]} ({repeat}) - {text}")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π HH:MM")

async def del_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("üìù –í–∫–∞–∂–∏ —ñ–Ω–¥–µ–∫—Å: /delreminder <—ñ–Ω–¥–µ–∫—Å>")
        return
    try:
        index = int(args[0])
        reminders = load_reminders()
        if 0 <= index < len(reminders):
            removed = reminders.pop(index)
            save_reminders(reminders)
            await update.message.reply_text(f"üóëÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ: {removed['time']} - {removed['text']}")
            logger.info(f"User {update.message.chat_id} deleted reminder: {removed['time']} - {removed['text']}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å")
    except ValueError:
        await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ —á–∏—Å–ª–æ —è–∫ —ñ–Ω–¥–µ–∫—Å")

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reminders = load_reminders()
    if not reminders:
        await update.message.reply_text("üìÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–µ–º–∞—î")
        return
    response = "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:\n"
    for i, reminder in enumerate(reminders):
        repeat = reminder.get("repeat", "–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ")
        response += f"{i}: {reminder['time']} ({repeat}) - {reminder['text']}\n"
    await update.message.reply_text(response)
    logger.info(f"User {update.message.chat_id} listed reminders")

async def set_workdays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("üìÜ –í–∫–∞–∂–∏ –¥–Ω—ñ (0-6, –¥–µ 0 - –ü–Ω): /setworkdays 0 1 2 3 4")
        return
    try:
        workdays = [int(day) for day in args if 0 <= int(day) <= 6]
        save_workdays(workdays)
        await update.message.reply_text(f"‚úÖ –†–æ–±–æ—á—ñ –¥–Ω—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {workdays}")
        logger.info(f"User {update.message.chat_id} set workdays: {workdays}")
    except ValueError:
        await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ —á–∏—Å–ª–∞ –≤—ñ–¥ 0 –¥–æ 6")

async def pin_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for key, note in NOTES.items():
        await update.message.reply_text(note, parse_mode="HTML")
    await update.message.reply_text("üìå –ó–∞–∫—Ä—ñ–ø–∏ —Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–¥–æ—Å—Ç—É–ø—É!")
    logger.info(f"User {update.message.chat_id} used /pinnotes")

async def callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data.startswith("reminder_time_"):
        context.user_data["reminder_time"] = query.data.replace("reminder_time_", "")
        await query.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–µ—Ä—ñ–æ–¥ (daily/weekly):")
        context.user_data["awaiting_reminder_text"] = True
        logger.info(f"User {query.message.chat_id} selected reminder time: {context.user_data['reminder_time']}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_reminder_text"):
        text = update.message.text.split()
        if len(text) < 2:
            await update.message.reply_text("üìù –í–∫–∞–∂–∏ –ø–µ—Ä—ñ–æ–¥ (daily/weekly) —ñ —Ç–µ–∫—Å—Ç: –ø–µ—Ä—ñ–æ–¥ –¢–µ–∫—Å—Ç")
            return
        repeat = text[0].lower()
        if repeat not in ["daily", "weekly"]:
            await update.message.reply_text("‚ùå –ü–µ—Ä—ñ–æ–¥: daily –∞–±–æ weekly")
            return
        reminder_text = " ".join(text[1:])
        reminder_time = context.user_data.get("reminder_time")
        try:
            time.fromisoformat(reminder_time)
            reminders = load_reminders()
            reminders.append({
                "time": reminder_time,
                "text": reminder_text,
                "chat_id": update.message.chat_id,
                "repeat": repeat
            })
            save_reminders(reminders)
            await update.message.reply_text(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ: {reminder_time} ({repeat}) - {reminder_text}")
            logger.info(f"User {update.message.chat_id} added reminder via inline: {reminder_time} ({repeat}) - {reminder_text}")
            context.user_data["awaiting_reminder_text"] = False
            context.user_data["reminder_time"] = None
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
    else:
        await reply_note(update, context)

async def check_reminders(context: ContextTypes.DEFAULT_TYPE):
    if not is_workday():
        return
    now = datetime.now()
    current_time = now.time().strftime("%H:%M")
    reminders = load_reminders()
    for reminder in reminders:
        if reminder["time"] == current_time:
            if reminder.get("repeat") == "daily" or (
                reminder.get("repeat") == "weekly" and
                (reminder.get("last_triggered") is None or
                 (now - datetime.fromisoformat(reminder["last_triggered"])).days >= 7)
            ):
                try:
                    await context.bot.send_message(
                        chat_id=reminder["chat_id"],
                        text=f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {reminder['text']}"
                    )
                    logger.info(f"Sent reminder to {reminder['chat_id']}: {reminder['time']} - {reminder['text']}")
                    if reminder.get("repeat") == "weekly":
                        reminder["last_triggered"] = now.isoformat()
                except Exception as e:
                    logger.error(f"Failed to send reminder to {reminder['chat_id']}: {e}")
    save_reminders(reminders)

def main():
    init_db()
    token = os.environ.get("BOT_TOKEN", "8099873828:AAGT3L40FQcpkT4ubgPMpi8hzpZwG_xJsF0")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("addreminder", add_reminder))
    app.add_handler(CommandHandler("delreminder", del_reminder))
    app.add_handler(CommandHandler("listreminders", list_reminders))
    app.add_handler(CommandHandler("setworkdays", set_workdays))
    app.add_handler(CommandHandler("pinnotes", pin_notes))
    app.add_handler(CallbackQueryHandler(callback_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    if app.job_queue:
        app.job_queue.run_repeating(check_reminders, interval=60, first=0)
    else:
        logger.error("JobQueue is not available. Please install python-telegram-bot[job-queue].")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
    if os.environ.get("RENDER"):
        port = int(os.environ.get("PORT", 8443))
        webhook_url = os.environ.get("WEBHOOK_URL")
        if not webhook_url:
            logger.error("WEBHOOK_URL is not set")
            raise ValueError("WEBHOOK_URL is not set")
        try:
            app.run_webhook(
                listen="0.0.0.0",
                port=port,
                url_path="/bot",
                webhook_url=f"{webhook_url}/bot"
            )
            logger.info(f"Webhook started on {webhook_url}/bot")
        except Exception as e:
            logger.error(f"Failed to start webhook: {e}")
            raise
    else:
        try:
            app.run_polling()
            logger.info("Polling started for local testing")
        except Exception as e:
            logger.error(f"Failed to start polling: {e}")
            raise

if __name__ == "__main__":
    main()
